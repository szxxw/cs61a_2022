# Q3 Sum Nums
def sum_nums(s):
    """
    >>> a = Link(1, Link(6, Link(7)))
    >>> sum_nums(a)
    14
    """
    "*** YOUR CODE HERE ***"
    if s.rest is Link.empty:
        return s.first
    else:
        return s.first + sum_nums(s.rest)
        
# Q4 Multiply Links
def multiply_lnks(lst_of_lnks):
    """
    >>> a = Link(2, Link(3, Link(5)))
    >>> b = Link(6, Link(4, Link(2)))
    >>> c = Link(4, Link(1, Link(0, Link(2))))
    >>> p = multiply_lnks([a, b, c])
    >>> p.first
    48
    >>> p.rest.first
    12
    >>> p.rest.rest.rest is Link.empty
    True
    """
    # Implementation Note: you might not need all lines in this skeleton code
    result = 1
    for i in lst_of_lnks:
        if i is Link.empty:
            return Link.empty
        result *= i.first
    lst_of_lnks_rests = [i.rest for i in lst_of_lnks]
    return Link(result, multiply_lnks(lst_of_lnks_rests))
    
    
# Q5 Flip Two

def flip_two(s):
    """
    >>> one_lnk = Link(1)
    >>> flip_two(one_lnk)
    >>> one_lnk
    Link(1)
    >>> lnk = Link(1, Link(2, Link(3, Link(4, Link(5)))))
    >>> flip_two(lnk)
    >>> lnk
    Link(2, Link(1, Link(4, Link(3, Link(5)))))
    """
    "*** YOUR CODE HERE ***"
    if s.rest is Link.empty or s is Link.empty:
        return 
    else:
        s.first, s.rest.first = s.rest.first, s.first
        flip_two(s.rest.rest)
    # For an extra challenge, try writing out an iterative approach as well below!
    # "*** YOUR CODE HERE ***"
    # while s.rest is not Link.empty and s is not Link.empty:
    #     s.first, s.rest.first = s.rest.first, s.first
    #     s = s.rest.rest
        
        
#   Q6 Make Even

def make_even(t):
    """
    >>> t = Tree(1, [Tree(2, [Tree(3)]), Tree(4), Tree(5)])
    >>> make_even(t)
    >>> t.label
    2
    >>> t.branches[0].branches[0].label
    4
    """
    "*** YOUR CODE HERE ***"
    # if t.label % 2 == 1:
    #     t.label += 1
    # for b in t.branches:
    #     make_even(b)
    
    t.label += t.label % 2
    for b in t.branches:
        make_even(b)
        
        
# Q7 Add leaves

def add_d_leaves(t, v):
    """Add d leaves containing v to each node at every depth d.

    >>> t_one_to_four = Tree(1, [Tree(2), Tree(3, [Tree(4)])])
    >>> print(t_one_to_four)
    1
      2
      3
        4
    >>> add_d_leaves(t_one_to_four, 5)
    >>> print(t_one_to_four)
    1
      2
        5
      3
        4
          5
          5
        5

    >>> t1 = Tree(1, [Tree(3)])
    >>> add_d_leaves(t1, 4)
    >>> t1
    Tree(1, [Tree(3, [Tree(4)])])
    >>> t2 = Tree(2, [Tree(5), Tree(6)])
    >>> t3 = Tree(3, [t1, Tree(0), t2])
    >>> print(t3)
    3
      1
        3
          4
      0
      2
        5
        6
    >>> add_d_leaves(t3, 10)
    >>> print(t3)
    3
      1
        3
          4
            10
            10
            10
          10
          10
        10
      0
        10
      2
        5
          10
          10
        6
          10
          10
        10
    """
    "*** YOUR CODE HERE ***"
    def helper(t, depth):
        for b in t.branches:
            helper(b, depth + 1)
        t.branches.extend([Tree(v) for i in range(depth)])
    helper(t, 0)
        
#   Q8 orders of growth

# exponential

# none of these


